import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import griddata
class HeuristicsMap:
    def __init__(self, noteFrequencies, defaultMap=None, alpha = 0.1):
        # TODO Default Map

        if defaultMap == None:
            for key_freq in noteFrequencies:
                self.default_map[key_freq] = {}
        else:
            self.default_map = defaultMap

        self.user_map = {}
        for key_freq in noteFrequencies:
            self.user_map[key_freq] = {}
        
        self.alpha = alpha

    def add_frequency(self, key_freq, delta_freq, value):
        self.user_map[key_freq][delta_freq] = value

    def get_all_map_info(self, curr_map):
        key_freqs = []
        delta_freqs = []
        values = []
        for key_freq, deltas in curr_map.items():
            for delta_freq, value in deltas.items():
                key_freqs.append(key_freq)
                delta_freqs.append(delta_freq)
                values.append(value)
        return key_freqs, delta_freqs, values

    def plot_map(self):
        key_freqs0, delta_freqs0, values0 = self.get_all_map_info(self.default_map)
        key_freqs, delta_freqs, values = self.get_all_map_info(self.user_map)
        grid_x, grid_y = np.mgrid[np.min(key_freqs):np.max(key_freqs):100j, 0:50:100j]

        # Perform cubic/nearest/linear interpolation - what makes sense for application?
        interp_values = griddata((key_freqs, delta_freqs), values, (grid_x, grid_y), method='linear')
        interp_values0 = griddata((key_freqs0, delta_freqs0), values0, (grid_x, grid_y), method='linear')
        plt.figure(figsize=(10, 6))
        plt.imshow(interp_values0.T, extent=(np.min(key_freqs), np.max(key_freqs), 0, 50), origin='lower', aspect='auto', cmap='gray')
        plt.imshow(interp_values.T, extent=(np.min(key_freqs), np.max(key_freqs), 0, 50), origin='lower', aspect='auto', cmap='RdYlGn')
        plt.colorbar(label='Harmony Value')
        plt.scatter(key_freqs, delta_freqs, c=values, edgecolor='k', cmap='RdYlGn')  # Original data points
        plt.title('Interpolated Heuristics Map')
        plt.xlabel('Key Freq')
        plt.ylabel('Delta Freq')
        plt.grid(True)
        plt.show()


# ---- DEBUG ONLY ----
        
def getNoteFrequencies():   
        # White keys are in Uppercase and black keys (sharps) are in lowercase
        octave = ['C', 'c', 'D', 'd', 'E', 'F', 'f', 'G', 'g', 'A', 'a', 'B'] 
        base_freq = 440 #Frequency of Note A4
        keys = np.array([x+str(y) for y in range(0,9) for x in octave])
        # Trim to standard 88 keys
        start = np.where(keys == 'A0')[0][0]
        end = np.where(keys == 'C8')[0][0]
        keys = keys[start:end+1]
        
        noteFrequencies = dict(zip(keys, [2**((n+1-49)/12)*base_freq for n in range(len(keys))]))
        noteFrequencies[''] = 0.0 # stop
        return noteFrequencies

notes = getNoteFrequencies()
heuristics_map = HeuristicsMap(notes.values(), {notes['C1']: {10: 0.3, 50: 0.1}, notes['f5']: {3:0.2}})
heuristics_map.add_frequency(notes['a1'], 5, 0.5)
heuristics_map.add_frequency(notes['B3'], 10, 0.6)
heuristics_map.add_frequency(notes['c2'], 40, 0.7)

heuristics_map.plot_map()