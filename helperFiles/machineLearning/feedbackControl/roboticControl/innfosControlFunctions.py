

import socket

UDP_IP = '192.168.1.30'
#UDP_IP = '192.168.1.111'
UDP_PORT = 2000

BUFFER_SIZE = 1024

def connectSocket():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.settimeout(3.0)
    return s

def handshake():
    s = connectSocket()
    s.sendto(bytes([0xEE, 0x00, 0x44, 0x00, 0x00, 0xED]),(UDP_IP, UDP_PORT))
    data = s.recvfrom(BUFFER_SIZE)
    gen = data[0][0:3]
    if gen==bytes([0xEE, 0x00, 0x44]):
        # everything seems ok
        gengen = 1 
    else:
        # something wrong
        gengen = 0
    s.close()
    return gengen

def queryID(gennum):
    s = connectSocket()
    gen =[]
    s.sendto(bytes([0xEE, 0x00, 0x02, 0x00, 0x00, 0xED]),(UDP_IP, UDP_PORT))
    for gen1 in range(gennum):
        data = s.recvfrom(BUFFER_SIZE)
        gen.append(data[0][1]) # only interested in the actuator ID
    s.close()
    return gen

def enableact(genid):
    s = connectSocket()
    gen = 1
    for byteg in genid:
        s.sendto(bytes([0xEE, byteg, 0x2A, 0x00, 0x01, 0x01, 0x7E, 0x80, 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        if bytes([data[0][5]]) != bytes([0x01]):
            gen = 0
    s.close()
    return gen

def disableact(genid):
    s = connectSocket()
    gen = 1
    for byteg in genid:
        s.sendto(bytes([0xEE, byteg, 0x2A, 0x00, 0x01, 0x00, 0xBF, 0x40, 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        if bytes([data[0][5]]) != bytes([0x01]):
            gen = 0
    s.close()
    return gen

def trapposmode(genid):
    s = connectSocket()
    gen = 1
    for byteg in genid:
        s.sendto(bytes([0xEE, byteg, 0x07, 0x00, 0x01, 0x06, 0x3F, 0x42, 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        if bytes([data[0][5]]) != bytes([0x01]):
            gen = 0
    s.close()
    return gen

def posmode(genid):
    s = connectSocket()
    gen = 1
    for byteg in genid:
        s.sendto(bytes([0xEE, byteg, 0x07, 0x00, 0x01, 0x03, 0xFF, 0x41, 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        if bytes([data[0][5]]) != bytes([0x01]):
            gen = 0
    s.close()
    return gen

def trapposset(genid, accel, maxspeed, decel):
    s = connectSocket()
    gen = 1
    indg = 0
    for byteg in genid:
        # set maximum speed
        if maxspeed[indg] < 0:
            maxspeedg = int((256 + maxspeed[indg])*2**24).to_bytes(4,'big')
        else:
            maxspeedg = int(maxspeed[indg]*2**24).to_bytes(4,'big')
        CRCg = CRC16_1(maxspeedg)
        s.sendto(bytes([0xEE, byteg, 0x1F, 0x00, 0x04, maxspeedg[0], maxspeedg[1], maxspeedg[2], maxspeedg[3], CRCg[0], CRCg[1], 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        if bytes([data[0][5]]) != bytes([0x01]):
            gen = 0
        # set acceleration
        if accel[indg] < 0:
            accelg = int((256 + accel[indg])*2**24).to_bytes(4,'big')
        else:
            accelg = int(accel[indg]*2**24).to_bytes(4,'big')
        CRCg = CRC16_1(accelg)
        s.sendto(bytes([0xEE, byteg, 0x20, 0x00, 0x04, accelg[0], accelg[1], accelg[2], accelg[3], CRCg[0], CRCg[1], 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        if bytes([data[0][5]]) != bytes([0x01]):
            gen = 0
        # set deceleration
        if decel[indg] < 0:
            decelg = int((256 + decel[indg])*2**24).to_bytes(4,'big')
        else:
            decelg = int(decel[indg]*2**24).to_bytes(4,'big')
        CRCg = CRC16_1(decelg)
        s.sendto(bytes([0xEE, byteg, 0x21, 0x00, 0x04, decelg[0], decelg[1], decelg[2], decelg[3], CRCg[0], CRCg[1], 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        if bytes([data[0][5]]) != bytes([0x01]):
            gen = 0
        indg = indg + 1
    s.close()
    return gen

def setpos(genid, pos):
    s = connectSocket()
    indg = 0
    for byteg in genid:
        if pos[indg] < 0:
            posg = int((256 + pos[indg])*2**24).to_bytes(4,'big')
        else:
            posg = int(pos[indg]*2**24).to_bytes(4,'big')
        CRCg = CRC16_1(posg)
        s.sendto(bytes([0xEE, byteg, 0x0A, 0x00, 0x04, posg[0], posg[1], posg[2], posg[3], CRCg[0], CRCg[1], 0xED]),(UDP_IP, UDP_PORT))
        indg = indg + 1
    s.close()
    return 1

def poslimit(genid, uppos, lowpos):
    s = connectSocket()
    gen = 1
    indg = 0
    for byteg in genid:
        # set upper limit position
        if uppos[indg] < 0:
            upposg = int((256 + uppos[indg])*2**24).to_bytes(4,'big')
        else:
            upposg = int(uppos[indg]*2**24).to_bytes(4,'big')
        CRCg = CRC16_1(upposg)
        s.sendto(bytes([0xEE, byteg, 0x83, 0x00, 0x04, upposg[0], upposg[1], upposg[2], upposg[3], CRCg[0], CRCg[1], 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        if bytes([data[0][5]]) != bytes([0x01]):
            gen = 0
        # set lower limit position
        if lowpos[indg] < 0:
            lowposg = int((256 + lowpos[indg])*2**24).to_bytes(4,'big')
        else:
            lowposg = int(lowpos[indg]*2**24).to_bytes(4,'big')
        CRCg = CRC16_1(lowposg)
        s.sendto(bytes([0xEE, byteg, 0x84, 0x00, 0x04, lowposg[0], lowposg[1], lowposg[2], lowposg[3], CRCg[0], CRCg[1], 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        if bytes([data[0][5]]) != bytes([0x01]):
            gen = 0
        indg = indg + 1
    s.close()
    return gen

def readposlimit(genid):
    s = connectSocket()
    # read the limit position for each actuator
    uppos = []
    lowpos = []
    for byteg in genid:
        s.sendto(bytes([0xEE, byteg, 0x85, 0x00, 0x00, 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        gtempg = int.from_bytes(data[0][5:9],'big')/(2**24) # iq24
        if gtempg < 128:
            uppos.append(gtempg)
        else:
            uppos.append(gtempg - 256.0)
        s.sendto(bytes([0xEE, byteg, 0x86, 0x00, 0x00, 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        gtempg = int.from_bytes(data[0][5:9],'big')/(2**24) # iq24
        if gtempg < 128:
            lowpos.append(gtempg)
        else:
            lowpos.append(gtempg - 256.0)
    s.close()
    return [uppos, lowpos]

def readtrapposset(genid):
    s = connectSocket()
    # read acceleration, max speed, and deceleration values
    maxspeed = []
    accel = []
    decel = []
    for byteg in genid:
        # maximum speed
        s.sendto(bytes([0xEE, byteg, 0x1C, 0x00, 0x00, 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        gtempg = int.from_bytes(data[0][5:9],'big')/(2**24) # iq24
        if gtempg < 128:
            maxspeed.append(gtempg)
        else:
            maxspeed.append(gtempg - 256.0)
        # acceleration
        s.sendto(bytes([0xEE, byteg, 0x1D, 0x00, 0x00, 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        gtempg = int.from_bytes(data[0][5:9],'big')/(2**24) # iq24
        if gtempg < 128:
            accel.append(gtempg)
        else:
            accel.append(gtempg - 256.0)
        # deceleration speed
        s.sendto(bytes([0xEE, byteg, 0x1E, 0x00, 0x00, 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        gtempg = int.from_bytes(data[0][5:9],'big')/(2**24) # iq24
        if gtempg < 128:
            decel.append(gtempg)
        else:
            decel.append(gtempg - 256.0)
    s.close()
    return [maxspeed, accel, decel]

def readpos(genid):
    s = connectSocket()
    # read the actuator position
    posgen =[]
    for byteg in genid:
        s.sendto(bytes([0xEE, byteg, 0x06, 0x00, 0x00, 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        gtempg = int.from_bytes(data[0][5:9],'big')/(2**24) # iq24
        if gtempg < 128:
            posgen.append(gtempg)
        else:
            posgen.append(gtempg - 256.0)
    s.close()
    return posgen

def readacttemp(genid):
    s = connectSocket()
    tempg =[]
    for byteg in genid:
        s.sendto(bytes([0xEE, byteg, 0x5F, 0x00, 0x00, 0xED]),(UDP_IP, UDP_PORT))
        data = s.recvfrom(BUFFER_SIZE)
        tempg.append(int.from_bytes(data[0][5:7],'big')/(2**8)) # iq8
    s.close()
    return tempg

def sendrecv(listg):
    s = connectSocket()
    s.sendto(bytes(listg),(UDP_IP, UDP_PORT))
    data = s.recvfrom(BUFFER_SIZE)
    s.close()
    return data[0]

# CRC High byte value table
chCRCHTable = (
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40
)
# CRC low byte value table
chCRCLTable = (
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
    0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
    0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
    0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
    0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
    0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
    0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
    0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
    0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
    0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
    0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
    0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
    0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
    0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
    0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
    0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
    0x41, 0x81, 0x80, 0x40
)

def CRC16_1(datag):
    chCRCHi = 0xFF # High CRC byte initialization
    chCRCLo = 0xFF # Low CRC byte initialization
    # wIndex Index in the CRC loop
    for byteg in datag:
        # Calculate CRC
        wIndex = chCRCHi ^ byteg
        chCRCHi = chCRCLo ^ chCRCHTable[wIndex]
        chCRCLo = chCRCLTable[wIndex]
    #return ((chCRCHi << 8) | chCRCLo)
    return [chCRCHi, chCRCLo]

